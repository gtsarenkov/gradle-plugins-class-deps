plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
    id "com.github.ben-manes.versions" version "0.51.0"
    id "java-test-fixtures"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://gitblit-org.github.io/moxie/maven"
        group "com.gitblit"
    }
}

dependencies {
    implementation gradleApi()
    implementation 'org.ow2.asm:asm:9.7.1'
    implementation 'org.ow2.asm:asm-tree:9.7.1'
    implementation 'org.ow2.asm:asm-util:9.7.1'
    testFixturesImplementation("org.apache.ant:ant:1.10.15")
    testImplementation(testFixtures(project))
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.mockito:mockito-core:4.0.0'
    //testRuntimeOnly 'com.gitblit.moxie:moxie-toolkit:0.10.0'

    // Use the awesome Spock testing and specification framework
    testImplementation libs.spock.core
    testImplementation gradleTestKit()

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

gradlePlugin {
    // Define the plugin
    plugins {
        "class-dependencies" {
            id = 'com.jdisc.toolchain.class-dependencies'
            implementationClass = 'com.jdisc.toolchain.ClassDependenciesPlugin'
        }
    }
}

group = 'com.jdisc.toolchain'
version = '0.9.0'

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
    testFixtures {
        java {
            srcDir "src/moxie/java"
        }
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    dependsOn compileTestJava, compileTestGroovy
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
}
